Crear un formulario para testimoniales

1) Abrir testimoniales.pug y escribir el siguiente código:
extends ./layout/index

block contenido
     main.container.mt-5 
          h1.text-center.mt-5 #{pagina}
          .row 

               h2.d-block.w-100.text-center Agrega un Testimonial
          
               .row.justify-content-center.col
                    .col-md-8 
                         form(action="/testimoniales" method="post")
                              .form-group 
                                   label(for="nombre") Nombre 
                                   input#nombre(type="text", placeholder="Tu nombre", name="nombre", class="form-control")
                              .form-group 
                                   label(for="correo") Correo 
                                   input#correo(type="text", placeholder="Tu correo", name="correo", class="form-control")
                              .form-group 
                                   label(for="mensaje") Mensaje 
                                   textarea#mensaje(name="mensaje", cols="30", rows="3", placeholder="Escribe un mensaje",class="form-control")
                              input.btn.btn-success.btn-block(type="submit")

En el atributo action del form se debe establecer una url, a la cual se enviarán los datos, es decir /testimoniales.
Cuando llenas un formulario para enviar datos siempre debe tener el atributo method="post", para enviar datos a un servidor.
El label se conecta con el input a través de un id, for="idInput" y cuando das click en el label se activa el input.
El atributo name en el input es importante porque no permite leer lo que el usuario escriba en el input y guardarlo en la BD.

2) Luego crear el router con el método post en el index de la carpeta routes:
import express from 'express';
import {
     paginaInicio, 
     paginaNosotros, 
     paginaTestimoniales, 
     paginaViajes, 
     paginaDetalleViaje
} from '../controllers/paginasController.js'

const router = express.Router();

router.get('/', paginaInicio);

router.get('/nosotros', paginaNosotros);

router.get('/viajes', paginaViajes);

router.get('/viajes/:slug', paginaDetalleViaje);

router.get('/testimoniales', paginaTestimoniales);

router.post('/testimoniales', guardarTestimonial);//<-----------

export default router;
Se creó el método post, asignando una url y una función que se ejecutará al presionar el botón submit.

3) Crear un controller en la carpeta controllers, llamado testimonialController.js, y le agregamos el siguiente código:
const guardarTestimonial = (req, res) => {
     console.log(req.body);
}

export {
     guardarTestimonial
};

req.body va a hacer lo que el usuario coloque en el formulario, normalmente este objeto viene vacío, para leer los datos del formulario y agregarlos al req.body se usa una dependencia llamada bodyparser.
En versiones viejas de express tenías que instalar una dependencia llamada bodyparser, hoy en día esta dependencia forma parte del core de express.

4) Entonces abrimos el index de la raíz y colocamos el siguiente código para leer los datos del formulario con el body parser:
// requerimos express
import express from 'express';
// importamos router
import router from './routes/index.js'
import db from './config/db.js';

const app = express();

// Conectar a BD
db.authenticate()
     .then( () => console.log('Base de datos conectada') )
     .catch( error => console.log(error))

// Definir puerto
const port = process.env.PORT || 4000;

// Habilitar PUG
app.set('view engine', 'pug');

// Obtener el año actual para el copyright
app.use((req, res, next) => {
     const year = new Date();

     res.locals.ActualYear = year.getFullYear();

     res.locals.NombreSitio = 'Agencia de Viajes';

     return next();
});

// Agregar bodyparser para leer los datos del formulario <------
app.use(express.urlencoded({extended: true}));

// Definir la carpeta public
app.use(express.static('public'));

// Agregar Router
app.use('/', router);

// Arranca el servidor con el método .listen, le pasa el port y un callback para 
app.listen(port, () => {
     console.log(`El servidor está funcionando en el puerto: ${port}`)
});

5) Una vez que los datos se guardan en el objeto req.body, vamos a modificar el código de testimonialController:
const guardarTestimonial = (req, res) => {
     // destructuring del objet req.body
     const { nombre, correo, mensaje } = req.body;

     // Validar formulario
     const errores = [];

     if (nombre.trim() === '') {
          errores.push({mensaje: 'Nombre no puede estar vacío'});
     };

     if (correo.trim() === '') {
          errores.push({mensaje: 'Correo no puede estar vacío'});
     };

     if (mensaje.trim() === '') {
          errores.push({mensaje: 'Mensaje no puede estar vacío'});
     };

     // Si hay errores
     if (errores.length > 0) {
          // Mostrar la vista con errores
          res.render('testimoniales', {
               pagina: 'Testimoniales',
               errores, 
               nombre,
               correo,
               mensaje
          });
     };
}

export {
     guardarTestimonial
};
Se puede también validar con express validator, en este caso usamos una función propia.
Los errores se almacenarán en un array vacío, para luego ser enviados a la vista a través res.render.
Se envían las variables extraídas del objeto req.body, con la finalidad de mantener esos valores en el formulario al momento de un error.

6) Abrimos la vista testimoniales.pug y agregamos el siguiente código:
extends ./layout/index

block contenido
     main.container.mt-5 
          h1.text-center.mt-5 #{pagina}
          .row 

               .col-md-12
                    h2.d-block.w-100.text-center Agrega un Testimonial

                    if(errores)
                         each error in errores
                              .alert.col.alert-danger.text-center= error.mensaje

               .row.justify-content-center.col
                    .col-md-8 
                         form(action="/testimoniales" method="post")
                              .form-group 
                                   label(for="nombre") Nombre (*)
                                   input#nombre(type="text", placeholder="Tu nombre", name="nombre", class="form-control", value= nombre)
                              .form-group 
                                   label(for="correo") Correo (*)
                                   input#correo(type="text", placeholder="Tu correo", name="correo", class="form-control", value = correo)
                              .form-group 
                                   label(for="mensaje") Mensaje (*)
                                   textarea#mensaje(name="mensaje", cols="30", rows="3", placeholder="Escribe un mensaje",class="form-control")= mensaje
                              input.btn.btn-success.btn-block(type="submit")
En los inputs se crearon los atributos value y se le asigno el nombre de la variable correspondiente que viene desde testimonialController (nombre, correo y mensaje), con la finalidad de mantener los datos al momento de un error.
El textarea no necesita un value, simplemente se coloca por fuera =variable.