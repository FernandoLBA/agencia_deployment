Configurar Servidor Express

1) En la carpeta raíz, crear un archivo llamado index.js

2) En este archivo se configurará express, es decir el servidor express sobre el cual se ejecutará la app.
// requerimos express
const express = require('express');

const app = express();

// Definir puerto
const port = process.env.PORT || 4000;

// arranca el servidor con el método .listen, le pasa el port y un callback para 
app.listen(port, () => {
     console.log(`El servidor está funcionando en el puerto: ${port}`)
});

3) Luego crearemos un script en el package.json
"dev": "nodemon index.js"
m  
4) Lo llamamos desde la terminal
npm run dev

5) Habilitamos los imports y exports
reemplazar la línea de código:
const express = require('express');
por:
import express from 'express';

6) Una vez hecho esto aparecerá el error:
Cannot use import statement outside a module
Esto quiere decir que no podemos usar un import fuera de un módulo.
En el package.json crear lo siguiente después de la sección scripts:
"type": "module",

7) Hacer una prueba hola mundo en el index.js:
app.get('/', (req, res)=>{
     res.send('Hola mundo');
});
Express soporta todos los verbos como put, post, get, patch y delete
entonces app.get en vía una petición hacia una url ('/') y un callback que utiliza el request y response, también existe un tercero llamado next.
-Request: es lo que envías.
 Hay varios tipos de métodos para el response:
 *.send: es un método utilizado para mostrar algo en pantalla.
 *.json: es un método para retornar un json, por ejemplo:
 res.json({
      id: 1
 });
 *.render: es el método más común, se utiliza para mostrar una vista completa.
-Response: es lo que express te envía.

8) Podemos tener varios códigos así llamados middlewares, para accesar a una página en específico:
app.get('/nosotros', (req, res)=>{
     res.send('Nosotros');
});

app.get('/viajes', (req, res)=>{
     res.send('Viajes');
});

app.get('/testimoniales', (req, res)=>{
     res.send('testimoniales');
});

Y así para cada página o enlace, sin embargo cuando se satura mucho de código el archivo principal, se pueden crear en archivos separados mediante el uso del MVC(model, view, controller).




