Almacenar los datos del formulario en la base de datos

1) Abrir el mysql workbench para crear la tabla de testimoniales
-Iniciar sesión, ir a la sección de schemas en la parte izquierda
-Ubicarse en tables, dar click derecho y click en create table.
-Colocar nombre de la tabla en table name
-En la sección Column name, dar click para agregar los nombres de las columnas.
-La primera columna se llamará id, será int(11) y autoincrementable(checkbox AI), not null, primary key.
-Segundo valor nombre, varchar(60)
-Tercero correo, varchar(60).
-Cuarto mensaje, text.
-Luego click en apply y nuevamente presionar apply, y finish.

2) Crear el modelo testimoniales.js en models:
import sequelize, { Sequelize } from 'sequelize';
import db from '../config/db.js';

// Se coloca un nombre a la variable del export y en el objeto db usamos el método define y le pasamos el nombre de la tabla y los campos
export const Testimonial = db.define('testimoniales', {
     nombre: {
          type: Sequelize.STRING
     },
     correo: {
          type: Sequelize.STRING
     },
     mensaje: {
          type: Sequelize.STRING
     }
});
No agregamos el id, ya que el ORM da por hecho de que existe ese id en la tabla.

3) Luego en testimonialController importamos ese modelo y agregamos el siguiente código:
import { Testimonial } from "../models/Testimoniales.js";

const guardarTestimonial = async (req, res) => {
     // destructuring del objet req.body
     const { nombre, correo, mensaje } = req.body;

     // Validar formulario
     const errores = [];

     if (nombre.trim() === '') {
          errores.push({mensaje: 'Nombre no puede estar vacío'});
     };

     if (correo.trim() === '') {
          errores.push({mensaje: 'Correo no puede estar vacío'});
     };

     if (mensaje.trim() === '') {
          errores.push({mensaje: 'Mensaje no puede estar vacío'});
     };

     // Si hay errores
     if (errores.length > 0) {
          // Mostrar la vista con errores
          res.render('testimoniales', {
               pagina: 'Testimoniales',
               errores, 
               nombre,
               correo,
               mensaje
          });

     } else {
          // Almacenarlo en la base de datos <------------------
          try {
               await Testimonial.create({
                    nombre,
                    correo,
                    mensaje
               });
               
               res.render('testimoniales', {
                    pagina: 'Testimoniales',
                    confirmacion: '¡Testimonial registrado exitosamente!'
               });

               // una vez guardados los datos, redirige al usuario a la página testimoniales
               res.redirect('/testimoniales');
          } catch (error) {
               console.log(error);
          }
     };
}

export {
     guardarTestimonial
};
Se convierte la función guardarTestimonial en async await.
Se usa un try catch, para prevenir que la aplicación se cierre o deje de funcionar en caso de que haya un error al guardar los datos en la BD.
Se usa la función Testimonial del model Testimoniales.js y se utiliza el método create para crear un nuevo registro en la base de datos, le pasamos todas las variables del objeto req.body que contienen los datos del formulario y estos se almacenan en la BD.
Se crea un mensaje de confirmación para que el usuario sepa que su testimonio fue guardado exitosamente.

4) En la vista testimoniales.pug agregamos el código del mensaje de confirmación:
extends ./layout/index

block contenido
     main.container.mt-5 
          h1.text-center.mt-5 #{pagina}
          .row 

               .col-md-12
                    h2.d-block.w-100.text-center Agrega un Testimonial

                    if(errores)
                         each error in errores
                              .alert.col.alert-danger.text-center= error.mensaje
                              
                    if(confirmacion)
                         .alert.col.alert-success.text-center= confirmacion

               .row.justify-content-center.col
                    .col-md-8 
                         form(action="/testimoniales" method="post")
                              .form-group 
                                   label(for="nombre") Nombre (*)
                                   input#nombre(type="text", placeholder="Tu nombre", name="nombre", class="form-control", value= nombre)
                              .form-group 
                                   label(for="correo") Correo (*)
                                   input#correo(type="text", placeholder="Tu correo", name="correo", class="form-control", value = correo)
                              .form-group 
                                   label(for="mensaje") Mensaje (*)
                                   textarea#mensaje(name="mensaje", cols="30", rows="3", placeholder="Escribe un mensaje",class="form-control")= mensaje
                              input.btn.btn-success.btn-block(type="submit")