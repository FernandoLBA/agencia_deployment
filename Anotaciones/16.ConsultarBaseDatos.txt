Consultar a la base de datos y mostrar información en la vista viajes

Para esto usaremos un ORM (Object Relationship Mapping), es como un manejador de consultas de bases de datos, puede ser MySQL, MSSQL Server, Postgres, MariaDB y SQLite. Los ORM más populares en Node son Sequelize y Mongus.

Este ORM se llama Sequelize, esta en la web: 
https://sequelize.org/
Y aquí el link de la documentación:
https://sequelize.org/master/

Sequelize es un ORM de Node.js, basado en promises. Cuenta con un sólido soporte de transacciones, relaciones, Eager(ansiosa) Loading(carga) y Lazy(perezoza) Loading, replicación de lectura y más.

1) En paginasController.js de la carpeta controller, estaremos importando el model Viaje dentro de Viaje.js de la carpeta models:
import { Viaje } from '../models/Viaje.js';

2) Luego en paginasController vamos a modificar el código de paginaViajes, agregando async await:
import { Viaje } from '../models/Viaje.js';

const paginaInicio = (req, res) => {

     res.render('Inicio', {
          pagina: 'Inicio'
     });
};

const paginaNosotros = (req, res) => {
     const viajes = 'Viaje a Alemania';

     res.render('Nosotros', {
          pagina: 'Nosotros'
     });
};

const paginaViajes = async (req, res) => { // <-----------------
     // Consultar base de datos
     const viajes = await Viaje.findAll();

     res.render('Viajes', {
          pagina: 'Viajes',
          viajes
     });
};

const paginaTestimoniales = (req, res) => {
     res.render('Testimoniales', {
          pagina: 'Testimoniales'
     });
};

export {
     paginaInicio,
     paginaNosotros,
     paginaViajes,
     paginaTestimoniales
};
Le pasamos al res.render la variable viajes, pero como llave y valor se llaman igual (viajes: viajes), aplicando el object literal enhancement solo colocamos viajes.

3) Luego en la vista viajes.pug vamos a agregar esta variable para que la muestre en pantalla, además de unos iconos importados de la página https://tablericons.com/: 
extends ./layout/index

block contenido
     h1(class="mt-5 text-center") #{pagina}
     main.container.mt-5 
          .row.proximos-viajes
               each viaje in viajes 
                    .col-md-6.col-lg-4.mb-4
                         .card 
                              img.card-img-top(src=`/img/destinos_${viaje.imagen}.jpg`, alt="")
                              .card-body
                                   h2= viaje.titulo
                                   p
                                        svg.icon.icon-tabler.icon-tabler-calendar(xmlns='http://www.w3.org/2000/svg' width='20' height='20' viewbox='0 0 24 24' stroke-width='1.5' stroke='#DC135F' fill='none' stroke-linecap='round' stroke-linejoin='round')
                                             path(stroke='none' d='M0 0h24v24H0z' fill='none')
                                             rect(x='4' y='5' width='16' height='16' rx='2')
                                             line(x1='16' y1='3' x2='16' y2='7')
                                             line(x1='8' y1='3' x2='8' y2='7')
                                             line(x1='4' y1='11' x2='20' y2='11')
                                             line(x1='11' y1='15' x2='12' y2='15')
                                             line(x1='12' y1='15' x2='12' y2='18')

                                        span.ml-2 
                                             strong Fecha Ida: 
                                             | #{viaje.fecha_ida} 
                                             strong Fecha Vuelta: 
                                             | #{viaje.fecha_vuelta}
                                   
                                   p
                                        svg.icon.icon-tabler.icon-tabler-users(xmlns='http://www.w3.org/2000/svg' width='20' height='20' viewbox='0 0 24 24' stroke-width='1.5' stroke='#DC135F' fill='none' stroke-linecap='round' stroke-linejoin='round')
                                             path(stroke='none' d='M0 0h24v24H0z' fill='none')
                                             circle(cx='9' cy='7' r='4')
                                             path(d='M3 21v-2a4 4 0 0 1 4 -4h4a4 4 0 0 1 4 4v2')
                                             path(d='M16 3.13a4 4 0 0 1 0 7.75')
                                             path(d='M21 21v-2a4 4 0 0 0 -3 -3.85')
                                             
                                             span.ml-2 #{viaje.disponibles} Disponibles
                                   
                                   p= viaje.descripcion.substr(0,100) + '...'

                                   a(href=`viajes/${viaje.slug}`, class="btn btn-success btn-block") Más Información

Usamos el método substr(valorInicial, valorFinal) para reducir el tamaño del texto mostrado en la página.

En el paginasController.js se modificó el texto del título de Viajes a Próximos viajes.

Cuando damos click en el botón más información, aparece un error, debido a que no se ha definido la ruta ni el controlador para mostrar el contenido de cada botón. En el botón agregamos como parte del enlace el slug de la base de datos, el cual servirá para anexarse como ruta específica para cada país. 