Consultar cada viaje según la URL visitada

1) Abrimos el index.js de la carpeta routes, para modificar las rutas de /viajes de una manera dinámica, usando el slug que recibimos de la base de datos y crear una página con esa ruta, que muestre específicamente el viaje seleccionado y sus datos.

Vamos a trabajar con el código de index.js de la carpeta routes:
import express from 'express';
import {paginaInicio, paginaNosotros, paginaTestimoniales, paginaViajes} from '../controllers/paginasController.js'

const router = express.Router();

router.get('/', paginaInicio);

router.get('/nosotros', paginaNosotros);

router.get('/viajes', paginaViajes);

router.get('/viajes/:slug', paginaDetalleViaje);// <------------

router.get('/testimoniales', paginaTestimoniales);

export default router;

creamos un nuevo middleware de router, en el cual anexamos a la ruta /viajes un comodín /:slug y ejecutará la función paginaDetalleViaje.

2) Abrimos paginasController y creamos un middleware con el código para que muestre la página con el viaje según el slug de la base de datos:
import { Viaje } from '../models/Viaje.js';

const paginaInicio = (req, res) => {

     res.render('Inicio', {
          pagina: 'Inicio'
     });
};

const paginaNosotros = (req, res) => {
     const viajes = 'Viaje a Alemania';

     res.render('Nosotros', {
          pagina: 'Nosotros'
     });
};

const paginaViajes = async (req, res) => {
     // Consultar base de datos
     const viajes = await Viaje.findAll();

     res.render('Viajes', {
          pagina: 'Próximos Viajes',
          viajes
     });
};

const paginaTestimoniales = (req, res) => {
     res.render('Testimoniales', {
          pagina: 'Testimoniales'
     });
};

// Muestra un viaje por su slug <-------------------------------
const paginaDetalleViaje = (req, res) => {
     console.log(req.params.slug);
};

export {
     paginaInicio,
     paginaNosotros,
     paginaViajes,
     paginaTestimoniales,
     paginaDetalleViaje // <------------------------------------
};

En el middleware estamos usando req.params, en params está la información requerida CampoSlug: valorSlug, sin embargo podemos ser más específicos al colocarle req.params.comodin, es decir el comodin usado (slug) en el index de routes para que se enlacen y coloque el slug de la base de datos como parte de la ruta.

Ese comodín (en este caso slug) debe coincidir en el request del controller y también en el router del index de routes.

Luego exportamos paginaDetalleViaje

3) En index de la carpeta routes, es necesario importar paginaDetalleViaje para que pueda acceder a la función:
import express from 'express';
import {
     paginaInicio, 
     paginaNosotros, 
     paginaTestimoniales, 
     paginaViajes, 
     paginaDetalleViaje // <---------------------------
} from '../controllers/paginasController.js'

const router = express.Router();

router.get('/', paginaInicio);

router.get('/nosotros', paginaNosotros);

router.get('/viajes', paginaViajes);

router.get('/viajes/:slug', paginaDetalleViaje);// <-----------

router.get('/testimoniales', paginaTestimoniales);

export default router;

4) Ahora colocamos el código a usar para mostrar el contenido de cada viaje en una página separada, abrimos paginasController y agregamos el siguiente código:
import { Viaje } from '../models/Viaje.js';

const paginaInicio = (req, res) => {

     res.render('Inicio', {
          pagina: 'Inicio'
     });
};

const paginaNosotros = (req, res) => {
     const viajes = 'Viaje a Alemania';

     res.render('Nosotros', {
          pagina: 'Nosotros'
     });
};

const paginaViajes = async (req, res) => {
     // Consultar base de datos
     const viajes = await Viaje.findAll();

     res.render('Viajes', {
          pagina: 'Próximos Viajes',
          viajes
     });
};

const paginaTestimoniales = (req, res) => {
     res.render('Testimoniales', {
          pagina: 'Testimoniales'
     });
};

// Muestra un viaje por su slug <-------------------------------
const paginaDetalleViaje = async (req, res) => {
     // Aplicamos destructuring a params
     const { slug } = req.params;

     try {
          const viaje = await Viaje.findOne({ where: { slug }});  
          
          res.render('Viaje', {
               pagina: 'Viaje',
               viaje
          });     
     } catch (error) {
          console.log(error);
     }
};

export {
     paginaInicio,
     paginaNosotros,
     paginaViajes,
     paginaTestimoniales,
     paginaDetalleViaje
};
Se hizo destructuring a params con el fin de extraer el valor de slug.

luego cuando se usa el método findOne en el modelo Viaje, colocamos un where para que busque cuando sea igual al slug que sacamos del objeto params y traiga 1 solo resultado y lo almacene en viaje.
Como en una sentencia sql:
select slug from agenciaviajes.viajes where slug = "viaje-venezuela"
En este caso ese "viaje-venezuela" lo tiene slug extraído del objeto params.

viaje contiene ahora todo el resultado de la consulta a la BD, el título, precio, fechas, slug, etc.

Se utilizó un try catch con la finalidad de que si nuestra consulta falla, mostrará el error y se seguirá ejecutando nuestra app, en vez de detenerse y dejar de funcionar.

5) Luego crearemos una vista llamada viaje.pug, la cual servirá para mostrar la variable viaje con la info del viaje consultado:
extends ./layout/index

block contenido
     main.container.mt-5 
          .row 
               .col-md-5 
                    img(src=`/img/destinos_${viaje.imagen}_ln.jpg`, alt="imagen viaje", class="img-fluid")
               .col-md-7
                    h1 #{viaje.titulo}
                    p
                         svg.icon.icon-tabler.icon-tabler-calendar(xmlns='http://www.w3.org/2000/svg' width='20' height='20' viewbox='0 0 24 24' stroke-width='1.5' stroke='#DC135F' fill='none' stroke-linecap='round' stroke-linejoin='round')
                              path(stroke='none' d='M0 0h24v24H0z' fill='none')
                              rect(x='4' y='5' width='16' height='16' rx='2')
                              line(x1='16' y1='3' x2='16' y2='7')
                              line(x1='8' y1='3' x2='8' y2='7')
                              line(x1='4' y1='11' x2='20' y2='11')
                              line(x1='11' y1='15' x2='12' y2='15')
                              line(x1='12' y1='15' x2='12' y2='18')

                         span.ml-2 
                              strong Fecha Ida: 
                              | #{viaje.fecha_ida} 
                              strong Fecha Vuelta: 
                              | #{viaje.fecha_vuelta}
                    p 
                         svg.icon.icon-tabler.icon-tabler-coin(xmlns='http://www.w3.org/2000/svg' width='20' height='20' viewbox='0 0 24 24' stroke-width='1.5' stroke='#DC135F' fill='none' stroke-linecap='round' stroke-linejoin='round')
                              path(stroke='none' d='M0 0h24v24H0z' fill='none')
                              circle(cx='12' cy='12' r='9')
                              path(d='M14.8 9a2 2 0 0 0 -1.8 -1h-2a2 2 0 0 0 0 4h2a2 2 0 0 1 0 4h-2a2 2 0 0 1 -1.8 -1')
                              path(d='M12 6v2m0 8v2')
                         span.ml-2 #{viaje.precio} USD
                    
                    p
                         svg.icon.icon-tabler.icon-tabler-users(xmlns='http://www.w3.org/2000/svg' width='20' height='20' viewbox='0 0 24 24' stroke-width='1.5' stroke='#DC135F' fill='none' stroke-linecap='round' stroke-linejoin='round')
                              path(stroke='none' d='M0 0h24v24H0z' fill='none')
                              circle(cx='9' cy='7' r='4')
                              path(d='M3 21v-2a4 4 0 0 1 4 -4h4a4 4 0 0 1 4 4v2')
                              path(d='M16 3.13a4 4 0 0 1 0 7.75')
                              path(d='M21 21v-2a4 4 0 0 0 -3 -3.85')
                              
                              span.ml-2 #{viaje.disponibles} Disponibles
                    
                    p= viaje.descripcion
Ya no necesitamos el botón de más información y tampoco el substr para limitar el contenido del párrafo.

Añadimos un ícono de precio y mostramos el precio del viaje.